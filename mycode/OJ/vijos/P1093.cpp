#include <fstream>
using namespace std;
ifstream fin("P1093.in");
ofstream fout("P1093.out");
int n;
long long a[4]={0},b[4]={0};
int main(){
	int i,j;
	fin >> n;
	b[0]=1;
	for(i=2;i<=n;i++)
		if(i%2)
		{
			b[0] = a[2];
			b[1] = a[3];
			b[2] = (a[0] + a[3])%7654321;
			b[3] = (a[1] + a[2])%7654321;
		}
		else
		{
			a[0] = b[2];
			a[1] = b[3];
			a[2] = (b[0] + b[3])%7654321;
			a[3] = (b[1] + b[2])%7654321;
		}
	if(n%2) fout <<  (b[0] + b[1] + b[2] + b[3])%7654321;
	else fout << (a[0] + a[1] + a[2] + a[3])%7654321;
    return 0;
}

/*
 背景 Background  
   　　化学不及格的Matrix67无奈选择了文科。他必须硬着头皮准备一次又一次的文科考试。 

 描述 Description   
   　　在这一学期一共有n次文科考试，考试科目有4种，分别为政治、历史、地理和综合。每次考哪一科是不定的，因此在考试前Matrix67不知道应该去复习哪一科的功课。他希望能预测出下一次可能考的科目。于是，他收集到了以往的文科考试的资料。从以往的考试中，他发现了这样几个规律： 

　　  1.如果这次考的是政治，那么下一次一定会考历史； 
　　  2.如果这次考的是综合，那么下一次一定会考地理； 
　　  3.如果这次考的是历史，那么下一次要么考政治，要么考地理； 
　　  4.如果这次考的是地理，那么下一次要么考历史，要么考综合。 

　　Matrix67已经知道，本学期的第一次考试科目为政治。他打算拟定一个可以应对所有可能情况的应考复习计划。因此，他想知道，整个学期有多少种可能的考试科目安排满足以上规律。 

 输入格式 Input Format  
   　　一个正整数n，代表本学期总的考试次数。 
　　输入数据保证n<=10000。 

 输出格式 Output Format  
   　　一个正整数，表示符合规律的科目安排方案的总数。 
　　考虑到这个结果可能会很大，因此你只需要输出它mod 7654321的值即可。 
   
 样例输入 Sample Input   
   5
 
 样例输出 Sample Output   
   5
 
 时间限制 Time Limitation  
   各个测试点1s 
   
 注释 Hint  
   样例说明： 

　　当n=5时，有以下5种方案满足要求： 

　　  政治-->历史-->政治-->历史-->政治 
　　  政治-->历史-->政治-->历史-->地理 
　　  政治-->历史-->地理-->历史-->政治 
　　  政治-->历史-->地理-->历史-->地理 
　　  政治-->历史-->地理-->综合-->地理 
 */


